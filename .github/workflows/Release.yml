# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI 

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-latest

    strategy:
     fail-fast: false
     matrix:
        target: ["apk --debug"]             #["apk --debug", "appbundle --debug", "ios --no-codesign", macos, web]    

    steps:
      - uses: actions/checkout@v2           #checking the repository 
      - uses: dart-lang/setup-dart@v1       # widgets dependecies
      
      - uses: subosito/flutter-action@v1    # For flutter dependecies
        with:
          channel: "stable"
      - run: flutter pub get                 #Installing the flutter dependecies  
      - run: dart analyze                    #Analyzing the code syntax   
  #    - run: flutter test                   # have some code writing error which can be resolved by the developer
  #    - run: flutter build apk #${{ matrix.target }}

      - name: set up JDK 12                 #setup java for gradle dependencies and gradle will build the packages
        uses: actions/setup-java@v1
        with:
          java-version: '12.x' 

      - run: flutter build apk              #--debug --split-per-abi  # building the package

      - name: push to release                  
        uses: ncipollo/release-action@v1    # depedencies for pushing the apk to release  
        with: 
          artifacts: "build/app/outputs/apk/release/*.apk*"     
          tag: v1.0.${{ github.run_number}}
          token: ${{ secrets.TOKEN }}

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  #./build/app/outputs/apk/release/my-app.apk
  #    - uses: actions/upload-artifact@v1
  #    - with:
  #        name: app
  #        path: app/build/outputs/apk/debug/app-debug.apk

  #    - run: flutter pub get
  #    - run: dart format --output=none --set-exit-if-changed .
  #    - run: dart analyze
  #    - run: dart test



      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      #- name: Analyze project source
      #  run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      #- name: Run tests
      #  run: dart test
