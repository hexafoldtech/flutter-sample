# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI 

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2     #checking the repository 
      - uses: dart-lang/setup-dart@v1 # widgets dependecies
  #    - uses: dart-lang/setup-dart@v1 #external for testing with out dart having an error of analyze
      
      - uses: subosito/flutter-action@v1    # For flutter dependecies
        with:
          channel: "stable"
      - run: flutter pub get                 #Installing the flutter dependecies  
      - run: dart analyze                    #Analyzing the code syntax   
  #    - run: flutter test       # have some code writing error which can be resolved by the developer
      - run: flutter build apk 
  #    - uses: actions/download-artifact@v1  # can be upload as well on the specific path
  #       with: 
  #        name: release-apk
  #        path: ./build/app/outputs/apk/release/my-app.apk


  #    - run: flutter pub get
  #    - run: dart format --output=none --set-exit-if-changed .
  #    - run: dart analyze
  #    - run: dart test


      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      #- name: Analyze project source
      #  run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      #- name: Run tests
      #  run: dart test
